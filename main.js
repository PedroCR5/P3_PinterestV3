/* Buenas Pedro,

Estoy revisando tu proyecto por segunda vez y veo que todav√≠a no est√°s dando con lo esencial. Da la sensaci√≥n de que tienes bastante confusi√≥n con varios conceptos, y no termino de entender de d√≥nde los has sacado, pero la mayor√≠a est√°n mal enfocados.

La √∫nica funcionalidad que est√° bien es el tema de las peticiones. El resto, sinceramente, no est√° correcto.

Empezamos por el main.js:

Tienes variables como element1Src, intertext‚Ä¶ que no deber√≠an estar ah√≠.
El pintado de la p√°gina principal lo est√°s haciendo todo con template literals, que se puede, pero tienes muchos fallos: repetici√≥n de IDs, clases mal puestas, sem√°ntica poco clara‚Ä¶
Un punto positivo es tu componente createButton, que no est√° mal.
Luego tienes la l√≥gica del modal de error y el buscador, que m√°s o menos vale.
No se entiende muy bien por qu√© haces dos fetch: uno para la info de la persona y otro para las im√°genes.

Pero lo m√°s preocupante es c√≥mo est√°s iterando los datos de las peticiones:

Est√°s haciendo la iteraci√≥n dentro de la funci√≥n, pas√°ndole el resultado directamente. Eso ya es raro, pero vale, podr√≠a pasar. El problema es c√≥mo lo haces: usas un for loop, concatenas todo mezclando l√≥gica de pintado con botones, backgrounds, dejas un img vac√≠o pero lo creas igual‚Ä¶ Coges fechas, haces substrings, botones de like, c√°mara‚Ä¶ todo metido a la vez, sin orden ni claridad.

Y luego haces dos loops, uno de 4 y otro de 10, que sinceramente, sigo sin entender para qu√©.

Te voy a resumir c√≥mo deber√≠as plantearlo desde la HOME y, sobre todo, desde el punto en el que recibes los datos. La API te devuelve 10 elementos ahora, y deber√≠as pintarlos con una iteraci√≥n limpia y coherente, usando los datos originales de forma simple.

1. Explora siempre con un console.log el resultado de la petici√≥n
Mira lo que te devuelve la llamada. Por ejemplo:

data
data
777√ó618 35.6 KB
Tienes un mont√≥n de datos: alt de las im√°genes, blurhash, colores, descripciones, likes, usuario, nombre completo, ubicaci√≥n‚Ä¶ puedes usar todo eso directamente.

2. Crea un template reutilizable
Una funci√≥n sencilla que pinte cada resultado de forma homog√©nea:

const CardTemplate = (result) => {
  return `
    <div class="card">
      <img src="${result.urls.small}" alt="${result.alt_description}">
      <div class="card-info">
        <h3>${result.user.name}</h3>
        <p>${result.description || 'No description available'}</p>
        <span>${result.likes} likes</span>
      </div>
    </div>
  `;
}
3. Itera de forma clara
Cuando recibas los datos:

results.forEach(result => {
  container.innerHTML += CardTemplate(result);
});
As√≠ cada tarjeta tendr√° siempre la misma estructura, y no necesitas m√°s l√≥gica de la cuenta.

La primera b√∫squeda que haces funciona, no es la m√°s eficiente, pero al menos va. Aun as√≠, te recomendar√≠a repasar el m√≥dulo y mirar bien las clases en directo, te vendr√≠a muy bien.

Te vuelvo a corregir cuando implementes algo m√°s parecido a lo que te acabo de dejar. Investiga un poco m√°s, y √°nimo con ello.

Un saludo! */

import './style.css';
import { createButton } from './src/components/button/button';
import { getImagesPerson } from './src/components/personInfo/personInfo';
import { getImages } from './src/components/infoAPI/infoAPI';
import { funcionAEjecutar } from './src/components/modal/modal';
export const accesKey = 'ulcAHukAVcmsmE3YQCJcVOoI_rtjQjdVJzrx7QnswEI';
export const endPoint = 'https://api.unsplash.com/search/photos';
export { element1Src, element2Src, elementName1InnerText, elementName2InnerText };

//!Variables
let firstWord = 'nada de nada';


//! Traer info de personas
let firstPerson = await getImagesPerson('man');
let secondPerson = await getImagesPerson('person');
let element1Src = firstPerson[0].urls.small;
let elementName1InnerText = firstPerson[0].user.first_name + " " + firstPerson[0].user.last_name;
let element2Src = secondPerson[0].urls.small;
let elementName2InnerText = secondPerson[8].user.first_name + " " + secondPerson[0].user.last_name;

//! Pinto el HTML
const divApp = document.querySelector("#app");
divApp.innerHTML =
  `<header>
  <div class="headerContainer">
    <img class="iconePinterest" src="./assets/pinterest_logo.png" alt="pinterest">
    <div class="desktopHeader">
        ${createButton({ texto: "Inicio", size: "s", classInfo: `desktopButton initial buttonInfo1` })}
        ${createButton({ texto: "Explorar", size: "s", classInfo: `desktopButton buttonInfo1` })}
        ${createButton({ texto: "Crear", size: "s", classInfo: `desktopButton buttonInfo1` })}
      </div>
    <div class="headerSearchContainer">
      <span class="icon">üîç</span>
      <input class="inputInfo" id="word" type="text" placeholder=" Buscar...">
    </div>
        <img class="desktopIconCampana iconePinterest" src="./assets/campana.png" alt="campana">
        <img class="desktopIconComments iconePinterest" src="./assets/comentarios.png" alt="comentarios">
    ${createButton({ texto: "D", size: "s", classInfo: "upRightButton buttonInfo1" })}
  </div>
</header> 
<div class="myDiv"></div>
<main> 
<div class="notification" id="notification">
  <h2 class="notificationH2">¬°Busqueda err√≥nea!, por favor int√©ntalo con palabras como gato, perro...</h2>
  ${createButton({ texto: "Pulsa aqu√≠ para intentarlo de nuevo", size: "s", classInfo: `tryAgain` })}
</div>
<div class="mainContainerCards2">
  <div class="container1 containersList" id="div1"> </div>
</div> 
</main>`;

//! El modal
const modalButton = document.querySelector(".tryAgain");
modalButton.addEventListener("click", funcionAEjecutar);

//!Traer informaci√≥n inicial de la API
getImages('dog');

//!Leer palabra de busqueda y traer de la API
document.getElementById('word').addEventListener('keydown', function (event) {
  if (event.key === 'Enter') {
    const valorInput = event.target.value;
    if (firstWord === 'nada de nada') {
      firstWord = event.target.value;
    }
    getImages(`${valorInput}`);
    event.target.value = '';
  }
});

//! Pinchar en icono Pinterest para refrescar la primera b√∫squeda
document.querySelector(`.iconePinterest`).onclick = function () {
  if (firstWord === 'nada de nada') {
    getImages('cat');
  }
  else {
    getImages(firstWord)
  };
};